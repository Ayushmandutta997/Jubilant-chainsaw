Indian coin exchange
int main()
{
 int n=0;
 cin>>n;
 int a[]={1,2,5,10,20,50,100,200,500,2000};
 while(n>0)
 {
   auto i=upper_bound(a,a+10,n);
   cout<<*(i-1)<<" ";
   n-=*(i-1);
 }
 return 0;
} 

Activity selection problem
int main()
{
 int n=0,i=0,start=0,end=0;
 cin>>n;
 vector<vector<int>>v;
 for(i=0;i<n;i++)
 {
   cin>>start>>end;
   v.push_back({start,end});
 }
 sort(v.begin(),v.end(),[&](vector<int>&a,vector<int>&b){
   return a[1]<b[1];
 });
 int cnt=1;
 end=v[0][1];
 for(i=1;i<n;i++)
 {
   if(v[i][0]>=end)
   {
     cnt++;
     end=v[i][1];
   }
 }
 cout<<cnt<<"\n";

Fractional knapsack
int main()
{
 int n=0,i=0;
 double price=0,weight=0,m=0;
 cin>>n>>m;
 vector<vector<double>>v;
 for(i=0;i<n;i++)
 {
   cin>>price>>weight;
   double x=(price/weight);
   v.push_back({price,weight,x});
 }
 sort(v.begin(),v.end(),[&](vector<double>&a,vector<double>&b){
   return a[2]>b[2];
 });

 int cnt=0,maxim=0;
 i=0;
 while(true)
 {
   if(cnt+v[i][1]>m)
   {
    maxim+=(m-cnt)*v[i][2];
    break;
   }
   maxim+=v[i][0];
   cnt+=v[i][1];
   i++;
 }
 cout<<maxim;

Optimal pattern merge
int main()
{
 int n=0,i=0,ans=0;
 priority_queue<int,vector<int>,greater<int>>pq;
 cin>>n;
 for(i=0;i<n;i++)
 {
   int a;
   cin>>a;
   pq.push(a);
 }
 while(pq.size()>1)
 {
  int e1=pq.top();
  pq.pop();
  int e2=pq.top();
  pq.pop();
  ans+=(e1+e2);
  pq.push(e1+e2);
 }
 cout<<ans;
 return 0;
} 

expedi
int main()
{
 int t=0;
 cin>>t;
 while(t--)
 { 
 int n=0,i=0,ans=0,inf=0,dis=0;
 priority_queue<int,vector<int>>fuel;
 cin>>n;
 vector<pair<int,int>>v(n);
 for(i=0;i<n;i++)
 {
   cin>>v[i].first>>v[i].second;
 }
 cin>>dis>>inf;
 for(i=0;i<n;i++)
 {
   v[i].first=dis-v[i].first;
 }
 int fu=inf;
 sort(v.begin(),v.end());
 bool flag=0;
 for(i=0;i<n;i++)
 {
   if(inf>=dis)
   break;

   while(inf < v[i].first)
   {
     if(fuel.empty())
     {
       flag=1;
       break;
     }
     ans++;
     inf+=fuel.top();
     fuel.pop();
   }
   if(flag)
   break;

   fuel.push(v[i].second);
 }
  if(flag)
  {
     cout<<-1<<endl;;
     continue;
  }
  while(!fuel.empty()&& inf<dis)
  {
    inf+=fuel.top();
    fuel.pop();
    ans++;
  }
  if(inf<dis)
  {
    cout<<-1<<endl;
    continue;
  }
  cout<<ans<<endl;
 }
 return 0;
} 
