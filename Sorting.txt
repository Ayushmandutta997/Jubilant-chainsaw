#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define mp make_pair
#define vvi vector<vector<int>>
#define ff first
#define ss second
#define in 1000000007
#define pii pair<ll int,ll int>
#define ull unsigned long long
#define uset unordered_set
#define umap unordered_map
#define maxheap priority_queue
#define lop(n) for(ll i=0;i<n;i++)
#define loop(a,b) for(ll i=a;i<=b;i++)
#define flash ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c)) 
#define lcm(a,b) (a*(b/__gcd(a,b)))
#define o0(a) cout<<a<<" "
#define o1(a) cout<<a<<"\n"
#define i1(a) cin>>a
#define i2(a, b) cin>>a>>b
#define show(A,N) for(ll int ind=0;ind<N;ind++) cout<<A[ind]<<" "; cout<<'\n';
#define take(A,N) for(ll int ind=0;ind<N;ind++){cin>>A[I];} 
#define lineb cout<<endl;
const ll binf = 1000000000000000000;
const ll inf = 1e9 + 5;
using namespace std;
int a[100];
int partition(int l,int h)
{
  int i=l;
  int j=h;
  int pi=a[l];
  while(i<j)
  { 
   do
   {
     i++;
   }while(pi>=a[i]);
   do
   {
     j--;
   }while(pi<a[j]);
   if(i<j)
   swap(a[i],a[j]);
  }
  swap(a[l],a[j]);
  return j;
}
void quicksort(int l,int h)
{
  if(l<h)
  {
    int pi=partition(l,h);
    quicksort(l,pi);
    quicksort(pi+1,h);
  }
} 
int main() 
{
  int n;
  i1(n);
  lop(n)
  i1(a[i]);
  a[n]=INT_MAX;
  quicksort(0,n);
  lop(n)
  o0(a[i]);
}
------------quicksort---------------
void countsort(int arr[],int n)
{
  int max=*max_element(arr,arr+n);
  int freq[max+1],i=0,narr[n];
  memset(freq, 0, sizeof(freq));
  memset(narr, 0, sizeof(narr)); 
  for(i=0;i<n;i++)
  {
    freq[arr[i]]++;
  }
  for(i=1;i<=max;i++)
  {
    freq[i]+=freq[i-1];
  }
  for(i=0;i<n;i++)
  {
   narr[--freq[arr[i]]]=arr[i];
  }
  for(i=0;i<n;i++)
  arr[i]=narr[i];
}
-------------countsort----------------
int arr[100];
long long merge(int l,int mid,int h)
{
  long long inv=0;
  int i=0,j=0;
  int n1=mid-l+1;
  int n2=h-mid;
  int a[n1];
  int b[n2];
  memset(a,0,sizeof(a));
  memset(b,0,sizeof(b));
  for(i=0;i<n1;i++)
  a[i]=arr[i+l];

  for(i=0;i<n2;i++)
  b[i]=arr[i+mid+1];

  i=0;j=0;
  int k=l;
  while(i<n1 and j<n2)
  {
   if(a[i]<=b[j])
   {
    arr[k]=a[i]; 
    i++;k++;
   }
   else
   {
    arr[k]=b[j];
    k++;j++;inv+=n1-i; 
   }
  }
  while(i<n1)
  {
    arr[k]=a[i];
    k++;i++;
  }
  while(j<n2)
  {
    arr[k]=b[j];
    k++;j++; 
  }
  return inv;
}
long long mergesort(int l,int h)
{
 long long inv=0;
 if(l<h)
 {
   int mid=((l+h)/2);
   inv+=mergesort(l,mid);
   inv+=mergesort(mid+1,h);
   inv+=merge(l,mid,h);
 }
 return inv; 
}
int main() 
{
 int n=0,i=0;
 cin>>n;
 for(i=0;i<n;i++)
 {
   cin>>arr[i];
 }  
 cout<<mergesort(0,n-1);
 return 0;
}
--------------countinversion-------------------
void wavesort(int a[])
{
 int i;
 int l=sizeof(&a)/sizeof(a[0]);
 for(i=1;i<=l-1;i+=2)
 {
  if(a[i]>a[i-1])
  swap(a[i],a[i-1]);

  if(a[i]>a[i+1]&&i<=l-2)
  swap(a[i],a[i+1]);
 }
}
------------------wavesort----------------------
void dnfsort(int a[],int l)
{
 int mid=0,low=0,high=l-1;
 while(mid<=high)
 {
   if(a[mid]==0)
   {
    swap(a[low],a[mid]);
    low++;mid++;
   }
   else if(a[mid]==1)
   mid++;
   else if(a[mid]==2)
   {
     swap(a[mid],a[high]);
     high--;
   }
 }
}
------------------dnfsort----------------------