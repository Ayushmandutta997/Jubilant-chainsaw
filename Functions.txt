Find subarrays in array
In general, for an array/string of size n, there are n*(n+1)/2 non-empty subarrays/substrings
void subArray(int arr[], int n)
{
    for (int i=0; i <n; i++)
    {
        for (int j=i; j<n; j++)
        {
            for (int k=i; k<=j; k++)
                cout << arr[k] << " ";
 
            cout << endl;
        }
    }
}
Find subsequences in array
void printSubsequences(int arr[], int n)
{
    /* Number of subsequences is (2**n -1)*/
    unsigned int opsize = pow(2, n);
 
    /* Run from counter 000..1 to 111..1*/
    for (int counter = 1; counter < opsize; counter++)
    {
        for (int j = 0; j < n; j++)
        {
            /* Check if jth bit in the counter is set
                If set then print jth element from arr[] */
            if (counter & (1<<j))
                cout << arr[j] << " ";
        }
        cout << endl;
    }
}
Check if a string S has subsequence target

#include <bits/stdc++.h>
using namespace std;

// Function to check if target
// is a subsequence of string S
void checkforSubsequence(string S,string target)
{

	// Declare a stack
	stack<char> s;

	// Push the characters of
	// target into the stack
	for (int i = 0; i < target.size(); i++) {
		s.push(target[i]);
	}

	// Traverse the string S in reverse
	for (int i = (int)S.size() - 1; i >= 0; i--) {

		// If the stack is empty
		if (s.empty()) {

			cout << "Yes" << endl;
			return;
		}

		// if S[i] is same as the
		// top of the stack
		if (S[i] == s.top()) {

			// Pop the top of stack
			s.pop();
		}
	}

	// Stack s is empty
	if (s.empty())
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}

int main()
{
	string S = "KOTTAYAM";
	string target = "KOTA";

	checkforSubsequence(S, target);

	return 0;
}

Sort string in o(n) complexity

#include<bits/stdc++.h>
using namespace std;

const int MAX_CHAR = 26;

void sortString(string &str)
{
	// Hash array to keep count of characters.
	// Initially count of all characters is
	// initialized to zero.
	int charCount[MAX_CHAR] = {0};
	
	// Traverse string and increment
	// count of characters
	for (int i=0; i<str.length(); i++)

		// 'a'-'a' will be 0, 'b'-'a' will be 1,
		// so for location of character in count
		// array we will do str[i]-'a'.
		charCount[str[i]-'a']++;
	
	// Traverse the hash array and print
	// characters
	for (int i=0;i<MAX_CHAR;i++)
		for (int j=0;j<charCount[i];j++)
			cout << (char)('a'+i);
}

int main()
{
	string s = "helloworld";
	sortString(s);
	return 0;
}

Permutations of a given string using STL
We can use next_permutation that modifies a string so that it stores lexicographically next permutation. If current string is lexicographically largest, i.e., “CBA”, then next_permutation returns false.
We first sort the string, so that it is converted to lexicographically smallest permutation. Then we one by one call next_permutation until it returns false.

#include <bits/stdc++.h>
using namespace std;

// Function to print permutations of string str
// using next_permutation
void permute(string str)
{
	// Sort the string in lexicographically
	// ascending order
	sort(str.begin(), str.end());

	// Keep printing next permutation while there
	// is next permutation
	do {
	cout << str << endl;
	} while (next_permutation(str.begin(), str.end()));
}
int main()
{
	string str = "CBA";
	permute(str);
	return 0;
}
Time complexity - o(n)
-------------
unordered map
map (like set) is an ordered sequence of unique keys whereas in unordered_map key can be stored in any order, 
so unordered. The map is implemented as a balanced tree structure that is why it is possible to maintain order 
between the elements (by specific tree traversal). The time complexity of map operations is O(log n) while for 
unordered_map, it is O(1) on average.
set,multimap,Unordered_set,Unordered_multiset,Unordered_multimap are similar.

In the worst case, its time complexity can go from O(1) to O(n), especially for big prime numbers. In this situation, it is highly advisable to use a map instead to avoid getting a TLE(Time Limit Exceeded) error.
---------------
priority queue - Priority queues are a type of container adapters, specifically designed such that the first
element of the queue is the greatest of all elements in the queue and elements are in nonincreasing order
priority_queue<int> gq - maxheap
priority_queue<int, vector<int>, greater<int> > gq - meanheap
---------------
#include <numeric>
accumulate(): This function returns the sum of all the values lying in a range between [first, last) with the 
variable sum. We usually find out the sum of elements in a particular range or a complete array using a linear 
operation which requires adding all the elements in the range one by one and storing it into some variable after each
iteration.

accumulate(first, last, sum);
accumulate(first, last, sum, myfun); 

first, last: first and last elements of range whose elements are to be added
sum:  initial value of the sum
myfun: a function for performing any specific task.
 
partial_sum( ): This function assigns a partial sum of the corresponding elements of an array to every position of 
the second array.It returns the partial sum of all the set of values lying between [first, last) and stores it in 
another array b.

partial_sum(first, last, b);
partial_sum(first, last, b, myfun);

The stoi() function converts a string data to an integer type by passing the string as a parameter to return an 
integer value.

Erases at most, len characters of *this, starting at index idx. 
string& string ::erase (size_type idx, size_type len )
- If len is missing, all remaining characters are removed.
- Throw out_of_range if idx > size().

Erase the single character at iterator position pos. 
string& string ::erase (iterator pos)
- Return the first character after the last character removed
- If no such character is remaining then, returns 
  string::end() i.e. position after the last character.

Erases all characters after position ‘pos’ 
string& string ::erase (size_type pos)
- Throw out_of_range if idx > size().

str.insert(6,str2);                 // to be (the )question

std::cout << "max_size: " << str.max_size() << "\n"; The maximum length the string can reach.

comparator function
sort(a.begin(),a.begin()+z,[&](pair<pair<ll,ll>,ll>&x,pair<pair<ll,ll>,ll>&y){return x.first.first<y.first.first;});

For calculating Areas use Unsigned long long

reversing a string-reverse(str.begin(), str.end()),string rev = string(str.rbegin(),str.rend());

Find first occurrence of "geeks"
size_t found = str.find(str1);
if (found != string::npos)
cout << "First occurrence is " << found << endl;

--------------
There is a function with syntax nth_element (RandomAccessIterator first, RandomAccessIterator nth, RandomAccessIterator last);
The function of this is that it rearranges the array in such a way such that the element at the nth position 
is the one which should be at that position if we sort the list from the first to last iterator. 
It uses the quick select method for this.Time complexity of nth_element is O(n) fuction unlike sort.
--------------
Special ways to initialize a vector
vector<int> vect{ 10, 20, 30 };
---
vector<int> vect1{ 10, 20, 30 };
vector<int> vect2(vect1.begin(), vect1.end());
---
int arr[5];
iota(arr, arr + 5, 1);
for (int i = 0; i < 5; i++) {
cout << arr[i] << " ";
}
o/p-1,2,3,4,5
---
What if we wish to initialize the first 4 values to say 100 and rest 6 values as 200 ?
One way to do this is to manually provide a value to each position in the vector. 
The other methods as provided in STL, the Standard Template Library, are fill and fill_n.  

fill() The ‘fill’ function assigns the value ‘val’ to all the elements in the range [begin, end),
where ‘begin’ is the initial position and ‘end’ is the last position.
vector<int> vect(8);
// calling fill to initialize values in the
// range to 4
fill(vect.begin() + 2, vect.end() - 1, 4);

o/p-0 0 4 4 4 4 4 0
fill_n() In fill_n(), we specify beginning position, number of elements to be filled and values to be filled. 
fill_n(vect.begin(), 4, 7);
for (int i=0; i<vect.size(); i++)
cout << ' ' << vect[i];
cout << '\n';
// calling fill to initialize 3 elements from
// "begin()+3" with value 4
fill_n(vect.begin() + 3, 3, 4);
7 7 7 7 0 0 0 0
7 7 7 4 4 4 0 0
//Count function
n=count(vect.begin(), vect.end(), 3);
n=count(str.begin(), str.end(), 'e');
-----------------------
bitwise ^,&,~,|(o(n)) are faster then other operations like %(o(n^3)),(*,/(o(n^2)))
------------
Find Factors of all numbers till 10^5

const ll MAXM = 1e5;
vector<ll> factors[MAXM + 5];
void init()
{
    for (ll i = 1; i <= MAXM; i++)
    {
        for (ll j = i; j <= MAXM; j += i)
        {
            factors[j].pb(i);
        }
    }
}
--------------------------
Binary Exponentiation
While calculating (n^k), binary exponentiation relies on whether n is even or odd.

If k is even (nk) can be written as  (n2)k/2. As we can see that computation steps were reduced from k to k/2 in just one step.

If k is odd (nk) can be written as n.(n)k-1, so now  (k-1) is even.

Approach:
Maintain a variable ans to store the final answer.
If k is even,square n and divide k by 2.as nk can be written as (n2)k/2  i.e (n*n)k/2.
If k is odd,multiply ans with n and reduce k by 1,as nk can be written as n*(n)k-1.
Print the ans.
--------------------------
Iterator lower_bound (Iterator first, Iterator last, const val)  
lower_bound returns an iterator pointing to the first element in the range [first,last) which has a value not less than ‘val’  and if the value is not present in the vector then it returns the end iterator.

Iterator upper_bound (Iterator first, Iterator last, const val)
upper_bound returns an iterator pointing to the first element in the range [first,last) which has a value greater than ‘val’  and if the value is not present in the vector then it returns the end iterator.

Time Complexity: O(n*log(n)) where n is the number of elements in the array.
Auxiliary Space: O(1)

lower = lower_bound(v.begin(), v.end(), 6);
upper = upper_bound(v.begin(), v.end(), 6);
cout << "lower_bound for 6 at index "
<< (lower - v.begin()) << '\n';
cout << "upper_bound for 6 at index "
<< (upper - v.begin()) << '\n';
---------------------------
Prefix Sum Array – Implementation and Applications in Competitive Programming
Given an array arr[] of size N, find the prefix sum of the array. A prefix sum array is another array prefixSum[] of the same size, such that the value of prefixSum[i] is arr[0] + arr[1] + arr[2] . . . arr[i].
void fillPrefixSum(int arr[], int n, int prefixSum[])
{
    prefixSum[0] = arr[0];
    // Adding present element with previous element
    for (int i = 1; i < n; i++)
        prefixSum[i] = prefixSum[i - 1] + arr[i];
}
---------------------------
Two pointers is really an easy and effective technique that is typically used for searching pairs in a sorted array.
Given a sorted array A (sorted in ascending order), having N integers, find if there exists any pair of elements (A[i], A[j]) such that their sum is equal to X.

Now let’s see how the two-pointer technique works. We take two pointers, one representing the first element and other representing the last element of the array, and then we add the values kept at both the pointers. If their sum is smaller than X then we shift the left pointer to right or if their sum is greater than X then we shift the right pointer to left, in order to get closer to the sum. We keep moving the pointers until we get the sum as X. 

int isPairSum(int A[], int N, int X)
{
    // represents first pointer
    int i = 0;
  
    // represents second pointer
    int j = N - 1;
  
    while (i < j) {
  
        // If we find a pair
        if (A[i] + A[j] == X)
            return 1;
  
        // If sum of elements at current
        // pointers is less, we move towards
        // higher values by doing i++
        else if (A[i] + A[j] < X)
            i++;
  
        // If sum of elements at current
        // pointers is more, we move towards
        // lower values by doing j--
        else
            j--;
    }
    return 0;
}
------------------------------------------------
Stable_sort - Similar to sort() but preserves semantic (initial) order in case of equivalent values which is not guaranteed in sort
Iota - initializes all values of array or vector according to given start value in consecutive order from pointer first to last 