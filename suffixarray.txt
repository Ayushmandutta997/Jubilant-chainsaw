Suffix array code in O(nlog^2n) time
int main()
{
  flash;
  sin(s);
  s=s+"$";
  int n=s.length(),i=0;
  vi p(n),c(n);
  vector<pair<char,int>>v(n);
  lop(n)
  {
    v[i]={s[i],i};
  } 
  sort(all(v));
  lop(n)
  {
    p[i]=v[i].second;
  }
  c[p[0]]=0;
  for(i=1;i<n;i++)
  {
   if(v[i].first!=v[i-1].first)
   c[p[i]]=c[p[i-1]]+1;
   else
   c[p[i]]=c[p[i-1]];
  }
  int k=0;
  while((1<<k)<n)
  {  
   vector<pair<pair<int,int>,int>>v1(n);
   lop(n)
   {
     v1[i]={{c[i],c[(i+(1<<k))%n]},i};
   }
   sort(all(v1));
   lop(n)
   {
    p[i]=v1[i].second;
   }
   c[p[0]]=0;
   for(i=1;i<n;i++)
   {
    if(v1[i].first!=v1[i-1].first)
    c[p[i]]=c[p[i-1]]+1;
    else
    c[p[i]]=c[p[i-1]];
   }
   k++;
  }
  lop(n)
  o0(p[i]);
  o1(""); 
}
Suffix array code in O(nlogn) time
#Using map
#include <bits/stdc++.h>
using namespace std;

int main()
{
	string s = "banana";
	int n = s.length();
	map<string, int> Map;
	int suffix[n];

	// Maping string with its index of
	// it's last letter.
	string sub = "";
	for (int i = n - 1; i >= 0; i--) {
		sub = s[i] + sub;
		Map[sub] = i;
	}

	// Storing all values of map
	// in suffix array.
	int j = 0;
	for (auto x : Map) {
		suffix[j] = x.second;
		j++;
	}

	// printing suffix array.
	cout << "Suffix array for banana is" << endl;
	for (int i = 0; i < n; i++) {
		cout << suffix[i] << " ";
	}
	cout << endl;
	return 0;
}
